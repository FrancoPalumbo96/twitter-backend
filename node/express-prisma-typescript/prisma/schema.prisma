// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String
  privateUser Boolean @default(false)
  profilePicture String? 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[] //One-to-many relation with Post
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  reactions Reaction[] 
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId]) // Unique Pair constraint
}

//commentedOnPostId String   @db.Uuid // Post it comments in Foreign Key

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  
  images   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many

  // Self-referential relation for comments
  parentId String? @db.Uuid // optional field that stores the Id of the parent post (the post being commented on).
  parent Post? @relation("PostComments", fields: [parentId], references: [id])
  comments Post[] @relation("PostComments")

  reactions Reaction[]
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId String @db.Uuid
  postId String @db.Uuid
  type ReactionType // Like or Retweet

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type], name: "unique_user_post_reaction") // Ensure a user can only react once per type
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  senderId String @db.Uuid
  receiverId String @db.Uuid
  content String
  createdAt DateTime @default(now())

  sender User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

enum ReactionType {
  LIKE
  RETWEET
}
